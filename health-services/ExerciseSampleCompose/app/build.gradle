/*
 * Copyright 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
  id 'com.android.application'
  id 'org.jetbrains.kotlin.android'
  id 'org.jetbrains.kotlin.kapt'
  id 'dagger.hilt.android.plugin'
  alias libs.plugins.roborazzi
}

android {
  compileSdk 34

  defaultConfig {
    applicationId "com.example.exercisecompose"
    minSdk 30
    targetSdk 33
    versionCode 1
    versionName "1.0"
  }

  buildTypes {
    release {
      minifyEnabled true
      shrinkResources true
      signingConfig signingConfigs.debug
      proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
    coreLibraryDesugaringEnabled true
  }
  testOptions {
    unitTests {
      includeAndroidResources true
    }
  }
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_17.majorVersion
    freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    freeCompilerArgs += "-opt-in=com.google.android.horologist.annotations.ExperimentalHorologistApi"
  }
  buildFeatures {
    compose true
  }
  composeOptions {
    kotlinCompilerExtensionVersion libs.compose.compiler.get().version
  }
  packagingOptions {
//    pickFirst 'data.proto'
    resources {
      excludes += "/META-INF/{AL2.0,LGPL2.1}"

    }
  }
  namespace 'com.example.exercisesamplecompose'
}

kotlin {
  jvmToolchain(17)
}

dependencies {
  // General compose dependencies
  implementation libs.androidx.activity.compose
  implementation libs.compose.ui.tooling.preview

  // Compose for Wear OS Dependencies
  implementation libs.wear.compose.material
  implementation libs.androidx.material.icons.extended
  implementation libs.androidx.wear
  implementation libs.androidx.compose.runtime
  implementation libs.androidx.compose.ui.tooling

  // Foundation is additive, so you can use the mobile version in your Wear OS app.
  implementation libs.wear.compose.foundation

  implementation libs.guava
  implementation libs.androidx.concurrent

  //Wear OS Compose Navigation
  implementation libs.compose.wear.navigation
  implementation libs.androidx.compose.navigation
  implementation libs.horologist.compose.layout
  implementation libs.horologist.compose.material
  implementation libs.horologist.health.composables
  implementation libs.horologist.health.service

  //Wear Health Services
  implementation libs.androidx.health.services

  // Lifecycle components
  implementation libs.androidx.lifecycle.viewmodel
  implementation libs.androidx.lifecycle.runtime
  implementation libs.androidx.lifecycle.common.java8
  implementation libs.androidx.lifecycle.extensions
  implementation libs.androidx.lifecycle.service
  implementation libs.androidx.lifecycle.runtime.compose
  implementation libs.androidx.core.splashscreen

  // Ongoing Activity
  implementation libs.wear.ongoing.activity

  // Hilt
  implementation libs.hilt.navigation.compose
  implementation libs.dagger.hilt.android
  kapt libs.dagger.hilt.android.compiler

  coreLibraryDesugaring(libs.desugar.jdk.libs)

  // Testing
  debugImplementation libs.androidx.ui.test.manifest
  testImplementation libs.androidx.ui.test.junit4
  testImplementation libs.junit
  testImplementation libs.robolectric
  testImplementation libs.roborazzi
  testImplementation libs.roborazzi.compose
  testImplementation libs.roborazzi.rule
  testImplementation(libs.horologist.roboscreenshots) {
    exclude(group: "com.github.QuickBirdEng.kotlin-snapshot-testing")
  }

  androidTestImplementation libs.test.ext.junit
  androidTestImplementation libs.test.espresso.core
  androidTestImplementation libs.compose.ui.test.junit4
  debugImplementation libs.compose.ui.tooling
}
